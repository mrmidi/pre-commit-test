# local s3 config

quarkus.s3.endpoint-override=http://localhost:8008

quarkus.native.container-runtime=podman

quarkus.s3.aws.region=us-east-1
quarkus.s3.aws.credentials.type=static
quarkus.s3.aws.credentials.static-provider.access-key-id=test-key
quarkus.s3.aws.credentials.static-provider.secret-access-key=test-secret

bucket.name=quarkus.s3.quickstart

quarkus.native.builder-image=quay.io/quarkus/ubi-quarkus-native-image:22.1-java11

#kafka.bootstrap.servers=
mp.messaging.incoming.storage-sink.connector=smallrye-kafka
#mp.messaging.incoming.storage-sink.failure-strategy=dead-letter-queue
mp.messaging.incoming.storage-sink.dead-letter-queue.value.serializer=io.quarkus.kafka.client.serialization.ObjectMapperSerializer
mp.messaging.incoming.storage-sink.key.deserializer=org.apache.kafka.common.serialization.StringDeserializer
#mp.messaging.incoming.storage-sink.value.deserializer=com.redhat.datarouter.connectors.reportportal.model.RPProcDeserializer
#mp.messaging.incoming.storage-sink.value-deserialization-failure-handler=failure-fallback

# Outgoing topic config
mp.messaging.outgoing.storage-upload-done.connector=smallrye-kafka
mp.messaging.outgoing.storage-upload-done.value.serializer=io.quarkus.kafka.client.serialization.ObjectMapperSerializer
mp.messaging.outgoing.storage-upload-done.key.serializer=org.apache.kafka.common.serialization.StringSerializer